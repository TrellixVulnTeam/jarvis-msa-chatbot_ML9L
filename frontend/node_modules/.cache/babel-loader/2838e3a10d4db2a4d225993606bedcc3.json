{"ast":null,"code":"var _jsxFileName = \"C:\\\\jarvis\\\\frontend\\\\src\\\\features\\\\chatbot\\\\components\\\\ChatModules.js\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { chatRequest } from \"features/chatbot/reducer/chatSlice\";\nimport Test from \"features/diary/components/Test\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function Ask(props) {\n  // const answer = useSelector(state => state.chat.chatData)\n  const dispatch = useDispatch(); // const [ text, setText ] = useState('')\n  // const [ count, setCount] = useState(0)\n  // const [ chatanswer, setChatAnswer] = useState({\n  //   data: {\n  //     chatAnswer : \"\",\n  //     chatKey: \"\"\n  //   }\n  // })\n\n  useEffect(() => {\n    setText(props.steps.userinput.value);\n    dispatch(chatRequest({\n      'chatKey': props.previousStep.key,\n      'chatAnswer': props.steps.userinput.value\n    }));\n    console.log('request 확인');\n  }, []);\n  const key = props.previousStep.key;\n  const botAnswer = {\n    [key]: useSelector(state => state.chatData[key])\n  }; // if(answer != null && count < 1){\n  //     setCount(count+1),\n  //     setChatAnswer(answer)\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: botAnswer[key]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\nexport function ResetMessage() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uB610 \\uB2E4\\uB978 \\uAD81\\uAE08\\uD558\\uC2E0 \\uBD80\\uBD84\\uC774 \\uC788\\uB098\\uC694?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}","map":{"version":3,"sources":["C:/jarvis/frontend/src/features/chatbot/components/ChatModules.js"],"names":["useEffect","useState","useDispatch","useSelector","chatRequest","Test","Ask","props","dispatch","setText","steps","userinput","value","previousStep","key","console","log","botAnswer","state","chatData","ResetMessage"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,QAA4B,oCAA5B;AACA,OAAOC,IAAP,MAAiB,gCAAjB;;;AAEA,OAAO,SAASC,GAAT,CAAaC,KAAb,EAAmB;AACtB;AACA,QAAMC,QAAQ,GAAGN,WAAW,EAA5B,CAFsB,CAGtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAF,EAAAA,SAAS,CAAC,MAAI;AACZS,IAAAA,OAAO,CAACF,KAAK,CAACG,KAAN,CAAYC,SAAZ,CAAsBC,KAAvB,CAAP;AACAJ,IAAAA,QAAQ,CAACJ,WAAW,CAAC;AAAC,iBAAWG,KAAK,CAACM,YAAN,CAAmBC,GAA/B;AAAmC,oBAAaP,KAAK,CAACG,KAAN,CAAYC,SAAZ,CAAsBC;AAAtE,KAAD,CAAZ,CAAR;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACD,GAJQ,EAIP,EAJO,CAAT;AAKA,QAAMF,GAAG,GAAGP,KAAK,CAACM,YAAN,CAAmBC,GAA/B;AACA,QAAMG,SAAS,GAAG;AAChB,KAACH,GAAD,GAAMX,WAAW,CAAEe,KAAD,IAASA,KAAK,CAACC,QAAN,CAAeL,GAAf,CAAV;AADD,GAAlB,CAjBsB,CAsBtB;AACA;AACA;AACA;;AACE,sBACE;AAAA,2BAEA;AAAA,gBAAMG,SAAS,CAACH,GAAD;AAAf;AAAA;AAAA;AAAA;AAAA;AAFA,mBADF;AAMH;AAGH,OAAO,SAASM,YAAT,GAAuB;AAC9B,sBAAO;AAAA,2BACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADG,mBAAP;AAKC","sourcesContent":["import { useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { chatRequest } from \"features/chatbot/reducer/chatSlice\"\r\nimport Test from \"features/diary/components/Test\"\r\n\r\nexport function Ask(props){\r\n    // const answer = useSelector(state => state.chat.chatData)\r\n    const dispatch = useDispatch()\r\n    // const [ text, setText ] = useState('')\r\n    // const [ count, setCount] = useState(0)\r\n    // const [ chatanswer, setChatAnswer] = useState({\r\n    //   data: {\r\n    //     chatAnswer : \"\",\r\n    //     chatKey: \"\"\r\n    //   }\r\n    // })\r\n    useEffect(()=>{\r\n      setText(props.steps.userinput.value)\r\n      dispatch(chatRequest({'chatKey': props.previousStep.key,'chatAnswer':props.steps.userinput.value}))\r\n      console.log('request 확인')\r\n    },[])\r\n    const key = props.previousStep.key\r\n    const botAnswer = {\r\n      [key]:useSelector((state)=>state.chatData[key])\r\n    }\r\n   \r\n    \r\n    // if(answer != null && count < 1){\r\n    //     setCount(count+1),\r\n    //     setChatAnswer(answer)\r\n    // }\r\n      return (\r\n        <>\r\n        {/* <div>{chatanswer.data.chatAnswer}</div> */}\r\n        <div>{botAnswer[key]}</div>\r\n        </>\r\n      );\r\n  }\r\n  \r\n  \r\nexport function ResetMessage(){\r\nreturn(<>\r\n    <div>\r\n    또 다른 궁금하신 부분이 있나요?\r\n    </div>\r\n</>)\r\n}"]},"metadata":{},"sourceType":"module"}