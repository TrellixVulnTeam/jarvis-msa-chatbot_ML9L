{"ast":null,"code":"var _jsxFileName = \"C:\\\\jarvis\\\\frontend\\\\src\\\\features\\\\chatbot\\\\components\\\\ChatModules.js\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { chatRequest } from \"features/chatbot/reducer/chatSlice\";\nimport Test from \"features/diary/components/Test\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function Ask(props) {\n  const answer = useSelector(state => state.chat.chatData);\n  const dispatch = useDispatch();\n  const [text, setText] = useState('');\n  const [count, setCount] = useState(0);\n  const [chatanswer, setChatAnswer] = useState({\n    data: {\n      chatAnswer: \"\",\n      chatKey: \"\"\n    }\n  });\n  const key = props.previousStep.key; // const botAnswer = {\n  //   [key]:useSelector((state)=>state.chatData[key])\n  // }\n\n  useEffect(() => {\n    setText(props.steps.userinput.value);\n    console.log('기릿');\n    dispatch(chatRequest({\n      'chatkey': props.previousStep.key,\n      'chatAnswer': props.steps.userinput.value\n    }));\n  }, [Test]); // if(answer != null && count < 1){\n  //     setCount(count+1),\n  //     setChatAnswer(answer)\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: botAnswer[key]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\nexport function ResetMessage() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uB610 \\uB2E4\\uB978 \\uAD81\\uAE08\\uD558\\uC2E0 \\uBD80\\uBD84\\uC774 \\uC788\\uB098\\uC694?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}","map":{"version":3,"sources":["C:/jarvis/frontend/src/features/chatbot/components/ChatModules.js"],"names":["useEffect","useState","useDispatch","useSelector","chatRequest","Test","Ask","props","answer","state","chat","chatData","dispatch","text","setText","count","setCount","chatanswer","setChatAnswer","data","chatAnswer","chatKey","key","previousStep","steps","userinput","value","console","log","botAnswer","ResetMessage"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,QAA4B,oCAA5B;AACA,OAAOC,IAAP,MAAiB,gCAAjB;;;AAEA,OAAO,SAASC,GAAT,CAAaC,KAAb,EAAmB;AACtB,QAAMC,MAAM,GAAGL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,QAArB,CAA1B;AACA,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAM,CAAEW,IAAF,EAAQC,OAAR,IAAoBb,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAAEc,KAAF,EAASC,QAAT,IAAqBf,QAAQ,CAAC,CAAD,CAAnC;AACA,QAAM,CAAEgB,UAAF,EAAcC,aAAd,IAA+BjB,QAAQ,CAAC;AAC5CkB,IAAAA,IAAI,EAAE;AACJC,MAAAA,UAAU,EAAG,EADT;AAEJC,MAAAA,OAAO,EAAE;AAFL;AADsC,GAAD,CAA7C;AAOA,QAAMC,GAAG,GAAGf,KAAK,CAACgB,YAAN,CAAmBD,GAA/B,CAZsB,CAatB;AACA;AACA;;AACAtB,EAAAA,SAAS,CAAC,MAAI;AACZc,IAAAA,OAAO,CAACP,KAAK,CAACiB,KAAN,CAAYC,SAAZ,CAAsBC,KAAvB,CAAP;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACAhB,IAAAA,QAAQ,CAACR,WAAW,CAAC;AAAC,iBAAWG,KAAK,CAACgB,YAAN,CAAmBD,GAA/B;AAAmC,oBAAaf,KAAK,CAACiB,KAAN,CAAYC,SAAZ,CAAsBC;AAAtE,KAAD,CAAZ,CAAR;AACD,GAJQ,EAIP,CAACrB,IAAD,CAJO,CAAT,CAhBsB,CAsBtB;AACA;AACA;AACA;;AACE,sBACE;AAAA,2BAEA;AAAA,gBAAMwB,SAAS,CAACP,GAAD;AAAf;AAAA;AAAA;AAAA;AAAA;AAFA,mBADF;AAMH;AAGH,OAAO,SAASQ,YAAT,GAAuB;AAC9B,sBAAO;AAAA,2BACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADG,mBAAP;AAKC","sourcesContent":["import { useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { chatRequest } from \"features/chatbot/reducer/chatSlice\"\r\nimport Test from \"features/diary/components/Test\"\r\n\r\nexport function Ask(props){\r\n    const answer = useSelector(state => state.chat.chatData)\r\n    const dispatch = useDispatch()\r\n    const [ text, setText ] = useState('')\r\n    const [ count, setCount] = useState(0)\r\n    const [ chatanswer, setChatAnswer] = useState({\r\n      data: {\r\n        chatAnswer : \"\",\r\n        chatKey: \"\"\r\n      }\r\n    })\r\n   \r\n    const key = props.previousStep.key\r\n    // const botAnswer = {\r\n    //   [key]:useSelector((state)=>state.chatData[key])\r\n    // }\r\n    useEffect(()=>{\r\n      setText(props.steps.userinput.value)\r\n      console.log('기릿')\r\n      dispatch(chatRequest({'chatkey': props.previousStep.key,'chatAnswer':props.steps.userinput.value}))\r\n    },[Test])\r\n    \r\n    // if(answer != null && count < 1){\r\n    //     setCount(count+1),\r\n    //     setChatAnswer(answer)\r\n    // }\r\n      return (\r\n        <>\r\n        {/* <div>{chatanswer.data.chatAnswer}</div> */}\r\n        <div>{botAnswer[key]}</div>\r\n        </>\r\n      );\r\n  }\r\n  \r\n  \r\nexport function ResetMessage(){\r\nreturn(<>\r\n    <div>\r\n    또 다른 궁금하신 부분이 있나요?\r\n    </div>\r\n</>)\r\n}"]},"metadata":{},"sourceType":"module"}