{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport { chatAPI } from \"..\";\nimport { chatFailure, chatRequest, chatSuccess } from \"../reducer/chatSlice\";\n\nfunction* chatBot(action) {\n  try {\n    const result = yield call(chatAPI.ChatAPI, action.payload);\n    alert(\"여기 사가\");\n    yield put(chatSuccess(result));\n    window.localStorage.setItem('sessionUser', JSON.parse(JSON.stringify(result.data)));\n    alert(JSON.stringify(result.data));\n  } catch (error) {\n    yield put(chatFailure(error));\n    alert(error);\n  }\n} // Watch 함수\n\n\nexport function* watchChat() {\n  yield takeLatest(chatRequest.type, chatBot); // loginRequest에서의 type이 실행되면 login함수가 실행되는데\n  // loginRequest의 action이 있으면 그 액션이 login함수의 인자로 들어갑니다.\n}","map":{"version":3,"sources":["C:/jarvis/frontend/src/features/chatbot/module/chatSaga.ts"],"names":["call","put","takeLatest","chatAPI","chatFailure","chatRequest","chatSuccess","chatBot","action","result","ChatAPI","payload","alert","window","localStorage","setItem","JSON","parse","stringify","data","error","watchChat","type"],"mappings":"AACA,SAASA,IAAT,EAAsBC,GAAtB,EAA2BC,UAA3B,QAA6C,oBAA7C;AACA,SAASC,OAAT,QAAwB,IAAxB;AACA,SAAsCC,WAAtC,EAAmDC,WAAnD,EAAgEC,WAAhE,QAAmF,sBAAnF;;AAGA,UAAUC,OAAV,CAAkBC,MAAlB,EAAyD;AACrD,MAAI;AACF,UAAMC,MAAmB,GAAG,MAAMT,IAAI,CACpCG,OAAO,CAACO,OAD4B,EAEpCF,MAAM,CAACG,OAF6B,CAAtC;AAIAC,IAAAA,KAAK,CAAC,OAAD,CAAL;AACA,UAAMX,GAAG,CAACK,WAAW,CAACG,MAAD,CAAZ,CAAT;AACAI,IAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,aAA5B,EAA2CC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeT,MAAM,CAACU,IAAtB,CAAX,CAA3C;AACAP,IAAAA,KAAK,CAACI,IAAI,CAACE,SAAL,CAAeT,MAAM,CAACU,IAAtB,CAAD,CAAL;AACD,GATD,CASE,OAAOC,KAAP,EAAmB;AACnB,UAAMnB,GAAG,CAACG,WAAW,CAACgB,KAAD,CAAZ,CAAT;AACAR,IAAAA,KAAK,CAACQ,KAAD,CAAL;AACD;AACF,C,CAID;;;AACA,OAAO,UAAUC,SAAV,GAAsB;AAC3B,QAAMnB,UAAU,CAACG,WAAW,CAACiB,IAAb,EAAmBf,OAAnB,CAAhB,CAD2B,CAE3B;AACA;AACD","sourcesContent":["import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { call, delay, put, takeLatest } from \"redux-saga/effects\";\nimport { chatAPI } from \"..\";\nimport { ChatBotData, ChatBotPayload, chatFailure, chatRequest, chatSuccess } from \"../reducer/chatSlice\";\n\n\nfunction* chatBot(action: PayloadAction<ChatBotPayload>) {\n    try {\n      const result: ChatBotData = yield call(\n        chatAPI.ChatAPI,\n        action.payload\n      );\n      alert(\"여기 사가\")\n      yield put(chatSuccess(result));\n      window.localStorage.setItem('sessionUser', JSON.parse(JSON.stringify(result.data)))\n      alert(JSON.stringify(result.data))\n    } catch (error: any) {\n      yield put(chatFailure(error))\n      alert(error)\n    }\n  }\n\n\n\n  // Watch 함수\n  export function* watchChat() {\n    yield takeLatest(chatRequest.type, chatBot);\n    // loginRequest에서의 type이 실행되면 login함수가 실행되는데\n    // loginRequest의 action이 있으면 그 액션이 login함수의 인자로 들어갑니다.\n  }"]},"metadata":{},"sourceType":"module"}