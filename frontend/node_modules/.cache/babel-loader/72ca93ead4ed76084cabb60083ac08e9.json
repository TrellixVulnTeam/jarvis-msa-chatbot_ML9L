{"ast":null,"code":"var _jsxFileName = \"C:\\\\jarvis\\\\frontend\\\\src\\\\features\\\\chatbot\\\\components\\\\ChatModules.js\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { chatRequest } from \"features/chatbot/reducer/chatSlice\";\nimport Test from \"features/diary/components/Test\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function Ask(props) {\n  const dispatch = useDispatch();\n  const key = props.previousStep.key;\n  const [answer, setAnswer] = useState(''); // const botAnswer = {\n  //   [key]:useSelector(state => state.chatData[key])\n  // }\n\n  const [text, setText] = useState(''); // const [ count, setCount] = useState(0)\n  // const [ test, setTest] = useState('')\n  // const [ chatanswer, setChatAnswer] = useState({\n  //   data: {\n  //     chatAnswer : \"\",\n  //     chatKey: \"\"\n  //   }\n  // })\n  // alert(` test :: ${test}`)\n  // alert(` count :: ${count}`)\n\n  useEffect(() => {\n    // setText(props.steps.userinput.value)\n    console.log('request 확인');\n    dispatch(chatRequest({\n      'chatKey': props.previousStep.key,\n      'chatAnswer': props.steps.userinput.value\n    }));\n    console.log(key);\n  }, [text]); // const a = useSelector(state => state.chat.chatData)\n  // setAnswer(a)\n\n  console.log(`=============state :: data :: ${JSON.stringify(answer)}`); // if(answer != null){\n  //     alert('answer 잇음')\n  //     setCount(count+1),\n  //     setChatAnswer(answer)\n  //     alert(answer.data.chatKey)\n  //     if (answer.data.chatKey == key){\n  //       alert(\" 키가 맞다!!\")\n  //       setTest(answer.data.chatAnswer)\n  //     }\n  // }\n  // else{\n  //   alert('answer 없음')\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: JSON.stringify(useSelector(state => state.chat.chatData))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\nexport function Ask2(props) {\n  const dispatch = useDispatch();\n  const key = props.previousStep.key;\n  const [answer, setAnswer] = useState(''); // const botAnswer = {\n  //   [key]:useSelector(state => state.chatData[key])\n  // }\n\n  const [text, setText] = useState(''); // const [ count, setCount] = useState(0)\n  // const [ test, setTest] = useState('')\n  // const [ chatanswer, setChatAnswer] = useState({\n  //   data: {\n  //     chatAnswer : \"\",\n  //     chatKey: \"\"\n  //   }\n  // })\n  // alert(` test :: ${test}`)\n  // alert(` count :: ${count}`)\n\n  useEffect(() => {\n    // setText(props.steps.userinput.value)\n    console.log('request 확인');\n    dispatch(chatRequest({\n      'chatKey': props.previousStep.key,\n      'chatAnswer': props.steps.userinput.value\n    }));\n    console.log(key);\n  }, [text]); // const a = useSelector(state => state.chat.chatData)\n  // setAnswer(a)\n\n  console.log(`=============state :: data :: ${JSON.stringify(answer)}`); // if(answer != null){\n  //     alert('answer 잇음')\n  //     setCount(count+1),\n  //     setChatAnswer(answer)\n  //     alert(answer.data.chatKey)\n  //     if (answer.data.chatKey == key){\n  //       alert(\" 키가 맞다!!\")\n  //       setTest(answer.data.chatAnswer)\n  //     }\n  // }\n  // else{\n  //   alert('answer 없음')\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: JSON.stringify(useSelector(state => state.chat.chatData))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\nexport function ResetMessage() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uB610 \\uB2E4\\uB978 \\uAD81\\uAE08\\uD558\\uC2E0 \\uBD80\\uBD84\\uC774 \\uC788\\uB098\\uC694?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}","map":{"version":3,"sources":["C:/jarvis/frontend/src/features/chatbot/components/ChatModules.js"],"names":["useEffect","useState","useDispatch","useSelector","chatRequest","Test","Ask","props","dispatch","key","previousStep","answer","setAnswer","text","setText","console","log","steps","userinput","value","JSON","stringify","state","chat","chatData","Ask2","ResetMessage"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { chatRequest } from \"features/chatbot/reducer/chatSlice\"\r\nimport Test from \"features/diary/components/Test\"\r\n\r\nexport function Ask(props){\r\n    \r\n    const dispatch = useDispatch()\r\n    const key = props.previousStep.key\r\n    const [answer, setAnswer] = useState('')\r\n    // const botAnswer = {\r\n    //   [key]:useSelector(state => state.chatData[key])\r\n    // }\r\n    const [ text, setText ] = useState('')\r\n    // const [ count, setCount] = useState(0)\r\n    // const [ test, setTest] = useState('')\r\n    // const [ chatanswer, setChatAnswer] = useState({\r\n    //   data: {\r\n    //     chatAnswer : \"\",\r\n    //     chatKey: \"\"\r\n    //   }\r\n    // })\r\n    // alert(` test :: ${test}`)\r\n    // alert(` count :: ${count}`)\r\n    useEffect(()=>{\r\n      // setText(props.steps.userinput.value)\r\n      console.log('request 확인')\r\n      dispatch(chatRequest({'chatKey': props.previousStep.key,'chatAnswer':props.steps.userinput.value}))\r\n      console.log(key)\r\n    },[text])\r\n    // const a = useSelector(state => state.chat.chatData)\r\n    // setAnswer(a)\r\n    console.log(`=============state :: data :: ${JSON.stringify(answer)}`)\r\n    // if(answer != null){\r\n    //     alert('answer 잇음')\r\n    //     setCount(count+1),\r\n    //     setChatAnswer(answer)\r\n    //     alert(answer.data.chatKey)\r\n    //     if (answer.data.chatKey == key){\r\n    //       alert(\" 키가 맞다!!\")\r\n    //       setTest(answer.data.chatAnswer)\r\n    //     }\r\n    \r\n    // }\r\n    // else{\r\n    //   alert('answer 없음')\r\n    // }\r\n      return (\r\n        <>\r\n        <div>{JSON.stringify(useSelector(state => state.chat.chatData))}</div>\r\n        {/* <div>{test}</div> */}\r\n        {/* <div>{botAnswer[key]}</div> */}\r\n        </>\r\n      );\r\n  }\r\n  export function Ask2\r\n  (props){\r\n    \r\n    const dispatch = useDispatch()\r\n    const key = props.previousStep.key\r\n    const [answer, setAnswer] = useState('')\r\n    // const botAnswer = {\r\n    //   [key]:useSelector(state => state.chatData[key])\r\n    // }\r\n    const [ text, setText ] = useState('')\r\n    // const [ count, setCount] = useState(0)\r\n    // const [ test, setTest] = useState('')\r\n    // const [ chatanswer, setChatAnswer] = useState({\r\n    //   data: {\r\n    //     chatAnswer : \"\",\r\n    //     chatKey: \"\"\r\n    //   }\r\n    // })\r\n    // alert(` test :: ${test}`)\r\n    // alert(` count :: ${count}`)\r\n    useEffect(()=>{\r\n      // setText(props.steps.userinput.value)\r\n      console.log('request 확인')\r\n      dispatch(chatRequest({'chatKey': props.previousStep.key,'chatAnswer':props.steps.userinput.value}))\r\n      console.log(key)\r\n    },[text])\r\n    // const a = useSelector(state => state.chat.chatData)\r\n    // setAnswer(a)\r\n    console.log(`=============state :: data :: ${JSON.stringify(answer)}`)\r\n    // if(answer != null){\r\n    //     alert('answer 잇음')\r\n    //     setCount(count+1),\r\n    //     setChatAnswer(answer)\r\n    //     alert(answer.data.chatKey)\r\n    //     if (answer.data.chatKey == key){\r\n    //       alert(\" 키가 맞다!!\")\r\n    //       setTest(answer.data.chatAnswer)\r\n    //     }\r\n    \r\n    // }\r\n    // else{\r\n    //   alert('answer 없음')\r\n    // }\r\n      return (\r\n        <>\r\n        <div>{JSON.stringify(useSelector(state => state.chat.chatData))}</div>\r\n        {/* <div>{test}</div> */}\r\n        {/* <div>{botAnswer[key]}</div> */}\r\n        </>\r\n      );\r\n  }\r\n  \r\n  \r\nexport function ResetMessage(){\r\nreturn(<>\r\n    <div>\r\n    또 다른 궁금하신 부분이 있나요?\r\n    </div>\r\n</>)\r\n}"]},"metadata":{},"sourceType":"module"}