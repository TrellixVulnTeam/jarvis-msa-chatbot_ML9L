{"ast":null,"code":"var _jsxFileName = \"C:\\\\jarvis\\\\frontend\\\\src\\\\features\\\\chatbot\\\\components\\\\ChatModules.js\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { chatRequest } from \"features/chatbot/reducer/chatSlice\";\nimport Test from \"features/diary/components/Test\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function Ask(props) {\n  const dispatch = useDispatch();\n  const key = props.previousStep.key;\n  const [counter, setCounter] = useState(0);\n  const [answer, setAnswer] = useState([]);\n  const [text, setText] = useState('');\n  const botAnswer = {\n    [key]: useSelector(state => state.chatData[key])\n  }; // const [ count, setCount] = useState(0)\n  // const [ test, setTest] = useState('')\n  // const [ chatanswer, setChatAnswer] = useState({\n  //   data: {\n  //     chatAnswer : \"\",\n  //     chatKey: \"\"\n  //   }\n  // })\n\n  useEffect(() => {\n    setText(props.steps.userinput.value);\n    dispatch(chatRequest({\n      'chatKey': props.previousStep.key,\n      'chatAnswer': props.steps.userinput.value\n    }));\n  }, [text]); // const a = useSelector(state => state.chat.chatData)\n  // setAnswer(a)\n\n  const chatanswer = useSelector(state => state.chat.chatData[key]); // alert(`챗데이터 확인임@@! ${JSON.stringify(chatanswer)}`)\n  // setAnswer(chatanswer['data'])\n  // if (answer != null && counter <1 ){\n  //   setCounter(counter + 1)\n  //   setAnswer(answer['data'])\n  // }\n  // alert(`AnswerData확인!! ::: ${JSON.stringify(answer)}`)\n  // if(chatanswer == null){\n  //   alert('답이 아직 안옴 대기')\n  // }\n  // else{\n  //   alert('답장이 왓다')\n  // }\n  // console.log(`=============state :: data :: ${JSON.stringify(answer)}`)\n  // if(answer != null){\n  //     alert('answer 잇음')\n  //     setCount(count+1),\n  //     setChatAnswer(answer)\n  //     alert(answer.data.chatKey)\n  //     if (answer.data.chatKey == key){\n  //       alert(\" 키가 맞다!!\")\n  //       setTest(answer.data.chatAnswer)\n  //     }\n  // }\n  // else{\n  //   alert('answer 없음')\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: JSON.stringify(chatanswer)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\nexport function ResetMessage() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uB610 \\uB2E4\\uB978 \\uAD81\\uAE08\\uD558\\uC2E0 \\uBD80\\uBD84\\uC774 \\uC788\\uB098\\uC694?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}","map":{"version":3,"sources":["C:/jarvis/frontend/src/features/chatbot/components/ChatModules.js"],"names":["useEffect","useState","useDispatch","useSelector","chatRequest","Test","Ask","props","dispatch","key","previousStep","counter","setCounter","answer","setAnswer","text","setText","botAnswer","state","chatData","steps","userinput","value","chatanswer","chat","JSON","stringify","ResetMessage"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,QAA4B,oCAA5B;AACA,OAAOC,IAAP,MAAiB,gCAAjB;;;AAEA,OAAO,SAASC,GAAT,CAAaC,KAAb,EAAmB;AAEtB,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAMO,GAAG,GAAGF,KAAK,CAACG,YAAN,CAAmBD,GAA/B;AACA,QAAM,CAACE,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAAEc,IAAF,EAAQC,OAAR,IAAoBf,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAMgB,SAAS,GAAG;AAChB,KAACR,GAAD,GAAMN,WAAW,CAACe,KAAK,IAAIA,KAAK,CAACC,QAAN,CAAeV,GAAf,CAAV;AADD,GAAlB,CARsB,CAatB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAT,EAAAA,SAAS,CAAC,MAAI;AACZgB,IAAAA,OAAO,CAACT,KAAK,CAACa,KAAN,CAAYC,SAAZ,CAAsBC,KAAvB,CAAP;AACAd,IAAAA,QAAQ,CAACJ,WAAW,CAAC;AAAC,iBAAUG,KAAK,CAACG,YAAN,CAAmBD,GAA9B;AAAkC,oBAAaF,KAAK,CAACa,KAAN,CAAYC,SAAZ,CAAsBC;AAArE,KAAD,CAAZ,CAAR;AACD,GAHQ,EAGP,CAACP,IAAD,CAHO,CAAT,CAtBsB,CA0BtB;AACA;;AAEA,QAAMQ,UAAU,GAAGpB,WAAW,CAACe,KAAK,IAAIA,KAAK,CAACM,IAAN,CAAWL,QAAX,CAAoBV,GAApB,CAAV,CAA9B,CA7BsB,CA+BtB;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACE,sBACE;AAAA,2BACA;AAAA,gBAAMgB,IAAI,CAACC,SAAL,CAAeH,UAAf;AAAN;AAAA;AAAA;AAAA;AAAA;AADA,mBADF;AAKH;AAEH,OAAO,SAASI,YAAT,GAAuB;AAC9B,sBAAO;AAAA,2BACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADG,mBAAP;AAKC","sourcesContent":["import { useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { chatRequest } from \"features/chatbot/reducer/chatSlice\"\r\nimport Test from \"features/diary/components/Test\"\r\n\r\nexport function Ask(props){\r\n    \r\n    const dispatch = useDispatch()\r\n    const key = props.previousStep.key\r\n    const [counter, setCounter] = useState(0)\r\n    const [answer, setAnswer] = useState([])\r\n    const [ text, setText ] = useState('')\r\n\r\n    const botAnswer = {\r\n      [key]:useSelector(state => state.chatData[key])\r\n    }\r\n\r\n    \r\n    // const [ count, setCount] = useState(0)\r\n    // const [ test, setTest] = useState('')\r\n    // const [ chatanswer, setChatAnswer] = useState({\r\n    //   data: {\r\n    //     chatAnswer : \"\",\r\n    //     chatKey: \"\"\r\n    //   }\r\n    // })\r\n\r\n    useEffect(()=>{\r\n      setText(props.steps.userinput.value)\r\n      dispatch(chatRequest({'chatKey':props.previousStep.key,'chatAnswer':props.steps.userinput.value}))\r\n    },[text])\r\n    // const a = useSelector(state => state.chat.chatData)\r\n    // setAnswer(a)\r\n\r\n    const chatanswer = useSelector(state => state.chat.chatData[key])\r\n\r\n    // alert(`챗데이터 확인임@@! ${JSON.stringify(chatanswer)}`)\r\n\r\n    // setAnswer(chatanswer['data'])\r\n    \r\n    // if (answer != null && counter <1 ){\r\n    //   setCounter(counter + 1)\r\n    //   setAnswer(answer['data'])\r\n    // }\r\n    // alert(`AnswerData확인!! ::: ${JSON.stringify(answer)}`)\r\n    // if(chatanswer == null){\r\n    //   alert('답이 아직 안옴 대기')\r\n    // }\r\n    // else{\r\n    //   alert('답장이 왓다')\r\n    // }\r\n    // console.log(`=============state :: data :: ${JSON.stringify(answer)}`)\r\n    // if(answer != null){\r\n    //     alert('answer 잇음')\r\n    //     setCount(count+1),\r\n    //     setChatAnswer(answer)\r\n    //     alert(answer.data.chatKey)\r\n    //     if (answer.data.chatKey == key){\r\n    //       alert(\" 키가 맞다!!\")\r\n    //       setTest(answer.data.chatAnswer)\r\n    //     }\r\n    \r\n    // }\r\n    // else{\r\n    //   alert('answer 없음')\r\n    // }\r\n      return (\r\n        <>\r\n        <div>{JSON.stringify(chatanswer)}</div>\r\n        </>\r\n      );\r\n  }\r\n\r\nexport function ResetMessage(){\r\nreturn(<>\r\n    <div>\r\n    또 다른 궁금하신 부분이 있나요?\r\n    </div>\r\n</>)\r\n}"]},"metadata":{},"sourceType":"module"}