{"ast":null,"code":"import { configureStore, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  chatLoading: false,\n  chatData: null,\n  error: null\n};\nconst chatSlice = createSlice({\n  name: \"chatBots\",\n  initialState,\n  reducers: {\n    chatRequest(state, _action) {\n      state.chatLoading = true;\n      state.error = null;\n    },\n\n    chatSuccess(state, action) {\n      state.chatLoading = false; // state.chatData = action.payload\n\n      const key2 = action.payload.data.chatKey;\n      const value = action.payload.data.chatAnswer;\n      state.chatData = { ...state.chatData,\n        [key2]: value\n      };\n      alert(` success :: ${JSON.stringify(action.payload)}`);\n      console.log(JSON.stringify(state.chatData));\n    },\n\n    chatFailure(state, action) {\n      state.chatLoading = false;\n      state.error = action.payload;\n    }\n\n  }\n});\nconst store = configureStore({\n  reducer: {\n    chat: chatSlice.reducer\n  }\n});\nconst {\n  reducer,\n  actions\n} = chatSlice;\nexport const {\n  chatRequest,\n  chatFailure,\n  chatSuccess\n} = actions;\nexport default reducer;","map":{"version":3,"sources":["C:/jarvis/frontend/src/features/chatbot/reducer/chatSlice.ts"],"names":["configureStore","createSlice","initialState","chatLoading","chatData","error","chatSlice","name","reducers","chatRequest","state","_action","chatSuccess","action","key2","payload","data","chatKey","value","chatAnswer","alert","JSON","stringify","console","log","chatFailure","store","reducer","chat","actions"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,WAAzB,QAA2D,kBAA3D;AA0BA,MAAMC,YAA0B,GAAG;AACjCC,EAAAA,WAAW,EAAE,KADoB;AAEjCC,EAAAA,QAAQ,EAAE,IAFuB;AAGjCC,EAAAA,KAAK,EAAE;AAH0B,CAAnC;AAQA,MAAMC,SAAS,GAAGL,WAAW,CAAC;AAC5BM,EAAAA,IAAI,EAAE,UADsB;AAE5BL,EAAAA,YAF4B;AAG5BM,EAAAA,QAAQ,EAAE;AAERC,IAAAA,WAAW,CAACC,KAAD,EAAsBC,OAAtB,EAA8D;AACvED,MAAAA,KAAK,CAACP,WAAN,GAAoB,IAApB;AACAO,MAAAA,KAAK,CAACL,KAAN,GAAc,IAAd;AACD,KALO;;AAORO,IAAAA,WAAW,CAACF,KAAD,EAAsBG,MAAtB,EAA0D;AACnEH,MAAAA,KAAK,CAACP,WAAN,GAAoB,KAApB,CADmE,CAEnE;;AACA,YAAMW,IAAI,GAAGD,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBC,OAAjC;AACA,YAAMC,KAAK,GAAGL,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBG,UAAlC;AACAT,MAAAA,KAAK,CAACN,QAAN,GAAiB,EAAC,GAAGM,KAAK,CAACN,QAAV;AAAoB,SAACU,IAAD,GAASI;AAA7B,OAAjB;AACAE,MAAAA,KAAK,CAAE,eAAcC,IAAI,CAACC,SAAL,CAAeT,MAAM,CAACE,OAAtB,CAA+B,EAA/C,CAAL;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACC,SAAL,CAAeZ,KAAK,CAACN,QAArB,CAAZ;AACD,KAfO;;AAiBRqB,IAAAA,WAAW,CAACf,KAAD,EAAsBG,MAAtB,EAA6D;AACtEH,MAAAA,KAAK,CAACP,WAAN,GAAoB,KAApB;AACAO,MAAAA,KAAK,CAACL,KAAN,GAAcQ,MAAM,CAACE,OAArB;AACD;;AApBO;AAHkB,CAAD,CAA7B;AA2BA,MAAMW,KAAK,GAAG1B,cAAc,CAAC;AAC3B2B,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAEtB,SAAS,CAACqB;AADT;AADkB,CAAD,CAA5B;AAMA,MAAM;AAAEA,EAAAA,OAAF;AAAWE,EAAAA;AAAX,IAAuBvB,SAA7B;AACA,OAAO,MAAM;AACXG,EAAAA,WADW;AAEXgB,EAAAA,WAFW;AAGXb,EAAAA;AAHW,IAKTiB,OALG;AAMP,eAAeF,OAAf","sourcesContent":["import { configureStore, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { string } from \"prop-types\";\n\nexport interface ChatBotData { //받아오는 데이터//\n  data: {\n    chatAnswer : string;\n    chatKey: string;\n  }\n}\nexport interface ChatBotPayload {// 요청데이터\n  chatAnswer : string;\n  chatKey: string;\n}\n//미들웨어\nexport interface ChatBotState {\n  chatLoading: boolean;\n  chatData: any;\n  error: any;\n  \n}\n// api의 param 타입\nexport interface ParamType {\n  chatAnswer : string;\n  chatKey: string;\n}\n\nconst initialState: ChatBotState = {\n  chatLoading: false, \n  chatData: null,\n  error: null,\n  \n  \n};\n\nconst chatSlice = createSlice({\n  name: \"chatBots\",\n  initialState,\n  reducers: {\n\n    chatRequest(state: ChatBotState, _action: PayloadAction<ChatBotPayload>) {\n      state.chatLoading = true;\n      state.error = null;\n    },\n\n    chatSuccess(state: ChatBotState, action: PayloadAction<ChatBotData>) {\n      state.chatLoading = false;\n      // state.chatData = action.payload\n      const key2 = action.payload.data.chatKey\n      const value = action.payload.data.chatAnswer\n      state.chatData = {...state.chatData, [key2] : value};\n      alert(` success :: ${JSON.stringify(action.payload)}`)\n      console.log(JSON.stringify(state.chatData))\n    },\n\n    chatFailure(state: ChatBotState, action: PayloadAction<{ error: any }>) {\n      state.chatLoading = false;\n      state.error = action.payload;\n    },\n  }\n});\n\nconst store = configureStore({\n  reducer: {\n    chat: chatSlice.reducer,\n  },\n});\nexport type RootState = ReturnType<typeof store.getState>;\nconst { reducer, actions } = chatSlice;\nexport const {\n  chatRequest,\n  chatFailure,\n  chatSuccess\n  \n} = actions;\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}